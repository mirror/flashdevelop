/**********************************************************/
/*** Generated using Asapire [brainy 2008-Mar-07 11:07] ***/
/**********************************************************/
package flash.data {
	import flash.events.EventDispatcher;
	import flash.net.Responder;
	public class SQLConnection extends EventDispatcher {
		/**
		 * Indicates whether autocompacting was enabled when the current database
		 *  was originally created (the value that was specified for the autoCompact
		 *  parameter in the open() or openAsync() call that created the
		 *  database). If this property is true, unused space is removed from the database file
		 *  automatically after each write operation, keeping the database file smaller. If the property
		 *  is false, the space previously occupied by removed data is left in the database
		 *  file and reused when needed. Even when autoCompact is false, you can force the
		 *  database to reclaim unused space by calling the compact() method.
		 */
		public function get autoCompact():Boolean;
		/**
		 * Provides access to the cache size for this connection, which represents the maximum number
		 *  of database disk pages that are held in memory at one time. Each page
		 *  uses about 1.5 KB of memory (depending on the value specified for the pageSize
		 *  parameter of the open() or openAsync() method call that created the
		 *  database). The default cache size is 2000. If an application is executing
		 *  UPDATE or DELETE operations that change many rows of a database,
		 *  increasing the cache size can improve speed at the cost of increased memory consumption.
		 */
		public function get cacheSize():uint;
		public function set cacheSize(value:uint):void;
		/**
		 * Indicates how column names are reported in the
		 *  result of a SELECT statement.
		 */
		public function get columnNameStyle():String;
		public function set columnNameStyle(value:String):void;
		/**
		 * Indicates whether the SQLConnection instance has an open connection
		 *  to a database file.
		 */
		public function get connected():Boolean;
		/**
		 * Indicates whether this connection is currently involved in a transaction.
		 */
		public function get inTransaction():Boolean;
		/**
		 * The last generated row identifier created by a SQL INSERT
		 *  statement. A row identifier is used to uniquely identify a row in a table within
		 *  the database. The value is frequently generated by the database.
		 */
		public function get lastInsertRowID():Number;
		/**
		 * Indicates the database page size (in bytes) that was specified when the current database
		 *  was originally created (the value that was specified for the pageSize
		 *  parameter in the open() or openAsync() call that created the
		 *  database).
		 */
		public function get pageSize():uint;
		/**
		 * Contains the total number of data changes that have been made since the
		 *  connection to the database was opened. In addition to tracking changes
		 *  made by INSERT, DELETE, and UPDATE
		 *  statements, this value includes changes caused by triggers.
		 */
		public function get totalChanges():Number;
		/**
		 * Creates a SQLConnection instance.
		 */
		public function SQLConnection();
		/**
		 * Registers an event listener object with an EventDispatcher object so that the listener
		 *  receives notification of an event. You can register event listeners on all nodes in the
		 *  display list for a specific type of event, phase, and priority.
		 *
		 * @param type              <String> The type of event.
		 * @param listener          <Function> The listener function that processes the event. This function must accept
		 *                            an Event object as its only parameter and must return nothing, as this example shows:
		 *                            function(evt:Event):void
		 *                            The function can have any name.
		 * @param useCapture        <Boolean (default = false)> Determines whether the listener works in the capture phase or the
		 *                            target and bubbling phases. If useCapture is set to true,
		 *                            the listener processes the event only during the capture phase and not in the
		 *                            target or bubbling phase. If useCapture is false, the
		 *                            listener processes the event only during the target or bubbling phase. To listen for
		 *                            the event in all three phases, call addEventListener twice, once with
		 *                            useCapture set to true, then again with
		 *                            useCapture set to false.
		 * @param priority          <int (default = 0)> The priority level of the event listener. The priority is designated by
		 *                            a signed 32-bit integer. The higher the number, the higher the priority. All listeners
		 *                            with priority n are processed before listeners of priority n-1. If two
		 *                            or more listeners share the same priority, they are processed in the order in which they
		 *                            were added. The default priority is 0.
		 * @param useWeakReference  <Boolean (default = false)> Determines whether the reference to the listener is strong or
		 *                            weak. A strong reference (the default) prevents your listener from being garbage-collected.
		 *                            A weak reference does not. Class-level member functions are not subject to garbage
		 *                            collection, so you can set useWeakReference to true for
		 *                            class-level member functions without subjecting them to garbage collection. If you set
		 *                            useWeakReference to true for a listener that is a nested inner
		 *                            function, the function will be garbage-collected and no longer persistent. If you create
		 *                            references to the inner function (save it in another variable) then it is not
		 *                            garbage-collected and stays persistent.
		 */
		public override function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false):void;
		/**
		 * Gathers statistics about database indices and
		 *  stores them in the database. These statistics can then be used by the query optimizer
		 *  (the portion of the database engine that determines the most efficient way to
		 *  execute each statement). The statistics help the query optimizer make better
		 *  choices about which index or indices to use when executing a particular query.
		 *
		 * @param resourceName      <String (default = null)> The name of the database or
		 *                            table whose indices are to be analyzed. If the specified resource is a table
		 *                            whose name is unique among all the attached databases, only the table name needs
		 *                            to be specified. However, a table name can be specified in the form
		 *                            [database-name].[table-name] to prevent ambiguity when the table name
		 *                            is not unique. If the resourceName parameter is null
		 *                            (the default), all the indices in all attached databases are analyzed.
		 * @param responder         <Responder (default = null)> An object that designates methods to be called when
		 *                            the operation succeeds or fails. In asynchronous execution mode, if the
		 *                            responder argument is null an analyze
		 *                            or error event is dispatched when execution completes.
		 */
		public function analyze(resourceName:String = null, responder:Responder = null):void;
		/**
		 * Adds another database to the SQLConnection instance, giving the new database
		 *  the specified name. Attaching a database allows that database to be used in SQL
		 *  statements executed against this SQLConnection instance.
		 *
		 * @param name              <String> The name that is used to identify the newly attached database.
		 *                            This name can be used in SQL statements to explicitly indicate that a table belongs
		 *                            to the specified database, when using the format [database-name].[table-name].
		 *                            The names "main" and "temp" are reserved and cannot be used.
		 * @param reference         <Object (default = null)> A reference to the database file to attach
		 *                            (a flash.filesystem.File instance). If the reference refers to a file that doesn't exist, either
		 *                            a new database file is created or an error is thrown according to the value that was specified for the
		 *                            openMode parameter in the open() or openAsync() call that
		 *                            connected the main database.
		 *                            If the parameter's value is null, an in-memory database is created and attached.
		 * @param responder         <Responder (default = null)> An object that designates methods to be called when
		 *                            the operation succeeds or fails. In asynchronous execution mode, if the
		 *                            responder argument is null an attach
		 *                            or error event is dispatched when execution completes.
		 */
		public function attach(name:String, reference:Object = null, responder:Responder = null):void;
		/**
		 * Begins a transaction within which all SQL statements executed against
		 *  the connection's database or databases are grouped.
		 *
		 * @param option            <String (default = null)> Indicates the locking strategy that is used by
		 *                            the transaction. The value can be one of the constants defined
		 *                            in the SQLTransactionLockType class:
		 *                            SQLTransactionLockType.DEFERRED indicates that a lock is not acquired
		 *                            until the first read or write operation.
		 *                            SQLTransactionLockType.EXCLUSIVE indicates that a lock is acquired as soon
		 *                            as possible, and no other SQLConnection instance can read from or write to the database.
		 *                            SQLTransactionLockType.IMMEDIATE indicates that a lock is acquired as soon
		 *                            as possible, in which other SQLConnection instances can read from but can't write to the database.
		 *                            The default value (null) is equivalent to SQLTransactionLockType.DEFERRED.
		 * @param responder         <Responder (default = null)> An object that designates methods to be called when
		 *                            the operation succeeds or fails. In asynchronous execution mode, if the
		 *                            responder argument is null a begin
		 *                            or error event is dispatched when execution completes.
		 */
		public function begin(option:String = null, responder:Responder = null):void;
		/**
		 * Aborts all SQL statements that are currently executing on databases connected to the SQLConnection
		 *  instance. This method can be used to stop long running or runaway queries.
		 *
		 * @param responder         <Responder (default = null)> An object that designates methods to be called when
		 *                            the operation succeeds or fails. In asynchronous execution mode, if the
		 *                            responder argument is null a cancel
		 *                            or error event is dispatched when execution completes.
		 */
		public function cancel(responder:Responder = null):void;
		/**
		 * Closes the current database connection. Any attached databases are
		 *  detached as well.
		 *
		 * @param responder         <Responder (default = null)> An object that designates methods to be called when
		 *                            the operation succeeds or fails. In asynchronous execution mode, if the
		 *                            responder argument is null a close
		 *                            or error event is dispatched when execution completes.
		 */
		public function close(responder:Responder = null):void;
		/**
		 * Commits an existing transaction, causing any actions performed by the transaction's
		 *  statements to be permanently applied to the database.
		 *
		 * @param responder         <Responder (default = null)> An object that designates methods to be called when
		 *                            the operation succeeds or fails. In asynchronous execution mode, if the
		 *                            responder argument is null a commit
		 *                            or error event is dispatched when execution completes.
		 */
		public function commit(responder:Responder = null):void;
		/**
		 * Reclaims all unused space in the database. When an object (table, index, or trigger) is
		 *  dropped from the database, it leaves behind empty space. This makes the database file
		 *  larger than it needs to be, but can speed up INSERT operations.
		 *  Over time, INSERT and DELETE operations can leave the database
		 *  file structure fragmented, which slows down disk access to the database contents. This
		 *  method compacts the database file, eliminating free pages, aligning table data to be
		 *  contiguous, and otherwise cleaning up the database file structure.
		 *
		 * @param responder         <Responder (default = null)> An object that designates methods to be called when
		 *                            the operation succeeds or fails. In asynchronous execution mode, if the
		 *                            responder argument is null a compact
		 *                            or error event is dispatched when execution completes.
		 */
		public function compact(responder:Responder = null):void;
		/**
		 * Removes all statistical information created by a call to the
		 *  analyze() method.
		 *
		 * @param responder         <Responder (default = null)> An object that designates methods to be called when
		 *                            the operation succeeds or fails. In asynchronous execution mode, if the
		 *                            responder argument is null a deanalyze
		 *                            or error event is dispatched when execution completes.
		 */
		public function deanalyze(responder:Responder = null):void;
		/**
		 * Detaches an additional database previously attached to the SQLConnection instance using
		 *  the attach() method. It is possible to have the same database file
		 *  attached multiple times using different names, and detaching one
		 *  connection to a file leaves the others intact. A database cannot be detached
		 *  if the database has an open transaction (if the inTransaction
		 *  property is true).
		 *
		 * @param name              <String> The given name of the database to detach.
		 * @param responder         <Responder (default = null)> An object that designates methods to be called when
		 *                            the operation succeeds or fails. In asynchronous execution mode, if the
		 *                            responder argument is null a detach
		 *                            or error event is dispatched when execution completes.
		 */
		public function detach(name:String, responder:Responder = null):void;
		/**
		 * Provides access to the result of a call to the loadSchema() method.
		 *  The getSchemaResult() method behaves as a first-in, first-out queue of
		 *  results. Each time the loadSchema() method call completes (each time the
		 *  schema event is dispatched in asynchronous execution mode),
		 *  a new SQLSchemaResult object is added to the queue.
		 *  Each time the getSchemaResult() method
		 *  is called, the earliest result (the one that was added to the queue first) is returned and removed
		 *  from the queue. When there are no more objects left in the queue, getSchemaResult()
		 *  returns null.
		 */
		public function getSchemaResult():SQLSchemaResult;
		/**
		 * Loads schema information from the connected database or any attached databases.
		 *  The schema indicates the structure of the database's tables, columns, indices, and triggers.
		 *
		 * @param type              <Class (default = null)> Indicates the type of schema to load. A null value (the
		 *                            default) indicates that all the schema information is loaded.
		 *                            Specifying a non-null value for this parameter narrows the scope of the
		 *                            resulting schema, removing potentially unneeded information from the results
		 *                            and making the operation more efficient. The value must be the class name of
		 *                            one of the following classes:
		 *                            SQLIndexSchema
		 *                            SQLTableSchema
		 *                            SQLTriggerSchema
		 *                            SQLViewSchema
		 * @param name              <String (default = null)> Indicates which resource's schema is loaded. How this value is
		 *                            used depends on the type argument specified. Typically, this is the name of a database
		 *                            object such as a table name, an index or view name, and so forth. If a value is specified,
		 *                            only schema information for the database object with the specified name is included in the
		 *                            result.
		 *                            If the specified value is not valid an error event is
		 *                            dispatched (or an error is thrown in synchronous execution mode). The type parameter
		 *                            value must correspond to the type of the object named in order for the value to be valid, as described
		 *                            in the method description.
		 *                            If the name argument is null then all schemata of the specified
		 *                            type are included. If the value specified is not valid an error event is dispatched.
		 * @param database          <String (default = "main")> The name of the database whose schema is loaded. If the value specified
		 *                            is not valid an error event is dispatched.
		 * @param includeColumnSchema<Boolean (default = true)> Indicates whether the result includes schema information for the
		 *                            columns of tables and views.
		 * @param responder         <Responder (default = null)> An object that designates methods to be called when
		 *                            the operation succeeds or fails. In asynchronous execution mode, if the
		 *                            responder argument is null a schema
		 *                            or error event is dispatched when execution completes.
		 */
		public function loadSchema(type:Class = null, name:String = null, database:String = "main", includeColumnSchema:Boolean = true, responder:Responder = null):void;
		/**
		 * Opens a connection to the database file at the specified location in the file system,
		 *  or creates and opens a new database file at the location, or creates and opens an
		 *  in-memory database.
		 *
		 * @param reference         <Object (default = null)> The location of the database file that is opened. This value must be
		 *                            a flash.filesystem.File instance. If the parameter's value is null, an in-memory database
		 *                            is created and opened.
		 * @param openMode          <String (default = "create")> Indicates how the database is opened. The value can be any of the
		 *                            constants defined in the SQLMode class. The default value is
		 *                            SQLMode.CREATE, indicating that if a database file is not found at the specified
		 *                            location, one is created. If openMode is SQLMode.READ and
		 *                            the specified file does not exist then an error event is dispatched. This parameter is ignored
		 *                            when the reference parameter is null.
		 * @param autoCompact       <Boolean (default = false)> Indicates whether unused space in the database is reclaimed automatically.
		 *                            This parameter is only valid when creating a new database file or opening a database file in which
		 *                            no tables have been created. By default, the space taken up by removed data is left in the database
		 *                            file and reused when needed. Setting this parameter to true causes the database to
		 *                            automatically reclaim unused space. This can negatively affect performance because it requires
		 *                            additional processing each time data is written to the database and can also cause the
		 *                            database data to become fragmented over time.
		 *                            To force the database to reclaim unused space in a database file at any time and to
		 *                            defragment the database file, use the compact() method.
		 *                            This parameter is ignored when the openMode parameter is SQLMode.READ.
		 * @param pageSize          <int (default = 1024)> Indicates the page size (in bytes) for the database. This parameter is
		 *                            only valid when creating a new database file or opening a database file in which
		 *                            no tables have been created. The value must be a power of two
		 *                            greater than or equal to 512 and less than or equal to 32768. The default value is 1024 bytes.
		 */
		public function open(reference:Object = null, openMode:String = "create", autoCompact:Boolean = false, pageSize:int = 1024):void;
		/**
		 * Opens a connection to the database file at the specified location in the file system,
		 *  or creates and opens a new database file at the location, or creates and opens an
		 *  in-memory database.
		 *
		 * @param reference         <Object (default = null)> The location of the database file that is opened. This value must be
		 *                            a flash.filesystem.File instance. If the parameter's value is null, an in-memory database
		 *                            is created and opened.
		 * @param openMode          <String (default = "create")> Indicates how the database is opened. The value can be any of the
		 *                            constants defined in the SQLMode class. The default value is
		 *                            SQLMode.CREATE, indicating that if a database file is not found at the specified
		 *                            location, one is created. If openMode is SQLMode.READ and
		 *                            the specified file does not exist then an error event is dispatched. This parameter is ignored
		 *                            when the reference parameter is null.
		 * @param responder         <Responder (default = null)> An object that designates methods to be called when the operation succeeds or fails.
		 *                            if the responder argument is null an open or error
		 *                            event is dispatched when execution completes.
		 * @param autoCompact       <Boolean (default = false)> Indicates whether unused space in the database is reclaimed automatically.
		 *                            This parameter is only valid when creating a new database file or opening a database file in which
		 *                            no tables have been created. By default, the space taken up by removed data is left in the database
		 *                            file and reused when needed. Setting this parameter to true causes the database to
		 *                            automatically reclaim unused space. This can negatively affect performance because it requires
		 *                            additional processing each time data is written to the database and can also cause the
		 *                            database data to become fragmented over time.
		 *                            To force the database to reclaim unused space in a database file at any time and to
		 *                            defragment the database file, use the compact() method.
		 *                            This parameter is ignored when the openMode parameter is SQLMode.READ.
		 * @param pageSize          <int (default = 1024)> Indicates the page size (in bytes) for the database. This parameter is only
		 *                            valid when creating a new database file or opening a database file in which
		 *                            no tables have been created. The value must be a power of two greater than or equal
		 *                            to 512 and less than or equal to 32768. The default value (-1) results in a
		 *                            page size of 1024 bytes. This parameter
		 *                            is ignored when the openMode parameter is SQLMode.READ.
		 */
		public function openAsync(reference:Object = null, openMode:String = "create", responder:Responder = null, autoCompact:Boolean = false, pageSize:int = 1024):void;
		/**
		 * Removes a listener from the EventDispatcher object. If there is no matching listener registered with the EventDispatcher object, a call to this method has no effect.
		 *
		 * @param type              <String> The type of event.
		 * @param listener          <Function> The listener object to remove.
		 * @param useCapture        <Boolean (default = false)> Specifies whether the listener was registered for the capture phase or the
		 *                            target and bubbling phases. If the listener was registered for both the capture phase and the
		 *                            target and bubbling phases, two calls to removeEventListener() are required
		 *                            to remove both, one call with useCapture() set to true, and another
		 *                            call with useCapture() set to false.
		 */
		public override function removeEventListener(type:String, listener:Function, useCapture:Boolean = false):void;
		/**
		 * Rolls back an existing transaction created using the begin() method, meaning all changes
		 *  made by any SQL statements in the transaction are discarded.
		 *
		 * @param responder         <Responder (default = null)> An object that designates methods to be called when
		 *                            the operation succeeds or fails. In asynchronous execution mode, if the
		 *                            responder argument is null a rollback
		 *                            or error event is dispatched when execution completes.
		 */
		public function rollback(responder:Responder = null):void;
	}
}
