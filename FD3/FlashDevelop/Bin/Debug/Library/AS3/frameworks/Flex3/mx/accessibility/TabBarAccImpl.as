package mx.accessibility
{
	import flash.accessibility.Accessibility;
	import flash.events.Event;
	import mx.containers.TabNavigator;
	import mx.controls.TabBar;
	import mx.controls.tabBarClasses.Tab;
	import mx.core.UIComponent;
	import mx.core.mx_internal;

include "../core/Version.as"
	/**
	 *  TabBarAccImpl is a subclass of AccessibilityImplementation
 *  which implements accessibility for the TabBar class.
	 */
	public class TabBarAccImpl extends AccImpl
	{
		/**
		 *  @private
		 */
		private static const ROLE_SYSTEM_PAGETAB : uint = 0x25;
		/**
		 *  @private
		 */
		private static const STATE_SYSTEM_FOCUSABLE : uint = 0x00100000;
		/**
		 *  @private
		 */
		private static const STATE_SYSTEM_FOCUSED : uint = 0x00000004;
		/**
		 *  @private
		 */
		private static const STATE_SYSTEM_SELECTABLE : uint = 0x00200000;
		/**
		 *  @private
		 */
		private static const STATE_SYSTEM_SELECTED : uint = 0x00000002;
		/**
		 *  @private
		 */
		private static const EVENT_OBJECT_FOCUS : uint = 0x8005;
		/**
		 *  @private
		 */
		private static const EVENT_OBJECT_SELECTION : uint = 0x8006;

		/**
		 *  @private
	 *	Array of events that we should listen for from the master component.
		 */
		protected function get eventsToHandle () : Array;

		/**
		 *  Enables accessibility in the TabBar class.
	 * 
	 *  <p>This method is called by application startup code
	 *  that is autogenerated by the MXML compiler.
	 *  Afterwards, when instances of TabBar are initialized,
	 *  their <code>accessibilityImplementation</code> property
	 *  will be set to an instance of this class.</p>
		 */
		public static function enableAccessibility () : void;

		/**
		 *  @private
	 *  Creates a TabBar's AccessibilityImplementation object.
	 *  This method is called from UIComponent's
	 *  initializeAccessibility() method.
		 */
		static function createAccessibilityImplementation (component:UIComponent) : void;

		/**
		 *  Constructor.
	 *
	 *  @param master The UIComponent instance that this AccImpl instance
	 *  is making accessible.
		 */
		public function TabBarAccImpl (master:UIComponent);

		/**
		 *  @private
	 *  Gets the role for the component.
	 *
	 *  @param childID children of the component
		 */
		public function get_accRole (childID:uint) : uint;

		/**
		 *  @private
	 *  IAccessible method for returning the state of the Tabs.
	 *  States are predefined for all the components in MSAA. Values are assigned to each state.
	 *  Depending upon the Tab being Focusable, Focused and Moveable, a value is returned.
	 *
	 *  @param childID:uint
	 *
	 *  @return STATE:uint
		 */
		public function get_accState (childID:uint) : uint;

		/**
		 *  @private
	 *  IAccessible method for returning the Default Action.
	 *
	 *  @param childID uint
	 *
	 *  @return focused childID.
		 */
		public function get_accDefaultAction (childID:uint) : String;

		/**
		 *  @private
	 *  IAccessible method for executing the Default Action.
	 *
	 *  @param childID uint
	 *
	 *  @return focused childID.
		 */
		public function accDoDefaultAction (childID:uint) : void;

		/**
		 *  @private
	 *  Method to return the childID Array.
	 *
	 *  @return Array
		 */
		public function getChildIDArray () : Array;

		/**
		 *  @private
	 *  IAccessible method for returning the bounding box of the Tabs.
	 *
	 *  @param childID:uint
	 *
	 *  @return Location:Object
		 */
		public function accLocation (childID:uint) : *;

		/**
		 *  @private
	 *  IAccessible method for returning the childFocus of the TabBar.
	 *
	 *  @param childID uint
	 *
	 *  @return focused childID.
		 */
		public function get_accFocus () : uint;

		/**
		 *  @private
	 *  method for returning the name of the Tab
	 *  which is spoken out by the screen reader.
	 *
	 *  @param childID:uint
	 *
	 *  @return Name:String
		 */
		protected function getName (childID:uint) : String;

		/**
		 *  @private
	 *  Override the generic event handler.
	 *  All AccImpl must implement this to listen for events
	 *  from its master component.
		 */
		protected function eventHandler (event:Event) : void;
	}
}
