package mx.utils
{
	import flash.utils.ByteArray;

	/**
	 *  The RPCUIDUtil class is a copy of UIDUtil without some functions that *  cause dependency problems when RPC messages are put in a bootstrap loader.
	 */
	public class RPCUIDUtil
	{
		/**
		 *  @private     *  Char codes for 0123456789ABCDEF
		 */
		private static const ALPHA_CHAR_CODES : Array = [];

		/**
		 *  Generates a UID (unique identifier) based on ActionScript's     *  pseudo-random number generator and the current time.     *     *  <p>The UID has the form     *  <code>"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"</code>     *  where X is a hexadecimal digit (0-9, A-F).</p>     *     *  <p>This UID will not be truly globally unique; but it is the best     *  we can do without player support for UID generation.</p>     *     *  @return The newly-generated UID.
		 */
		public static function createUID () : String;
		/**
		 * Converts a 128-bit UID encoded as a ByteArray to a String representation.     * The format matches that generated by createUID. If a suitable ByteArray     * is not provided, null is returned.     *      * @param ba ByteArray 16 bytes in length representing a 128-bit UID.     *      * @return String representation of the UID, or null if an invalid     * ByteArray is provided.
		 */
		public static function fromByteArray (ba:ByteArray) : String;
		/**
		 * A utility method to check whether a String value represents a      * correctly formatted UID value. UID values are expected to be      * in the format generated by createUID(), implying that only     * capitalized A-F characters in addition to 0-9 digits are     * supported.     *      * @param uid The value to test whether it is formatted as a UID.     *      * @return Returns true if the value is formatted as a UID.
		 */
		public static function isUID (uid:String) : Boolean;
		/**
		 * Converts a UID formatted String to a ByteArray. The UID must be in the     * format generated by createUID, otherwise null is returned.     *      * @param String representing a 128-bit UID     *      * @return ByteArray 16 bytes in length representing the 128-bits of the     * UID or null if the uid could not be converted.
		 */
		public static function toByteArray (uid:String) : ByteArray;
		/**
		 * Returns the decimal representation of a hex digit.     * @private
		 */
		private static function getDigit (hex:String) : uint;
	}
}
