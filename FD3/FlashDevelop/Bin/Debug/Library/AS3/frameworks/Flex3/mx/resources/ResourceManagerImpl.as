package mx.resources
{
	import flash.events.Event;
	import flash.events.EventDispatcher;
	import flash.events.IEventDispatcher;
	import flash.events.TimerEvent;
	import flash.system.ApplicationDomain;
	import flash.system.Capabilities;
	import flash.system.SecurityDomain;
	import flash.utils.Timer;
	import mx.core.IFlexModuleFactory;
	import mx.core.mx_internal;
	import mx.core.Singleton;
	import mx.events.ModuleEvent;
	import mx.events.ResourceEvent;
	import mx.modules.IModuleInfo;
	import mx.modules.ModuleManager;
	import mx.utils.StringUtil;
	import flash.events.EventDispatcher;
	import mx.events.ModuleEvent;
	import mx.events.ResourceEvent;
	import mx.modules.IModuleInfo;
	import mx.resources.IResourceModule;

	/**
	 *  @copy mx.resources.IResourceManager#change
	 */
	[Event(name="change", type="flash.events.Event")] 

include "../core/Version.as"
	/**
	 *  This class provides an implementation of the IResourceManager interface.
 *  The IResourceManager and IResourceBundle interfaces work together
 *  to provide internationalization support for Flex applications.
 *
 *  <p>A single instance of this class manages all localized resources
 *  for a Flex application.</p>
 *  
 *  @see mx.resources.IResourceManager
 *  @see mx.resources.IResourceBundle
	 */
	public class ResourceManagerImpl extends EventDispatcher implements IResourceManager
	{
		/**
		 *  @private
     *  The sole instance of the ResourceManager.
		 */
		private static var instance : IResourceManager;
		/**
		 *  @private
     *  A map whose keys are locale strings like "en_US"
     *  and whose values are "bundle maps".
     *  A bundle map is a map whose keys are bundle names
     *  like "SharedResources" and whose values are ResourceBundle instances.
     *  You can get to an individual resource value like this:
     *  localeMap["en_US"]["SharedResources"].content["currencySymbol"]
		 */
		private var localeMap : Object;
		/**
		 *  @private
     *  A map whose keys are URLs for resource modules that have been loaded
     *  and whose values are ResourceModuleInfo instances for those modules.
		 */
		private var resourceModules : Object;
		/**
		 *  @private
		 */
		private var initializedForNonFrameworkApp : Boolean;
		/**
		 *  @private
     *  Storage for the localeChain property.
		 */
		private var _localeChain : Array;

		/**
		 *  @copy mx.resources.IResourceManager#localeChain
		 */
		public function get localeChain () : Array;
		/**
		 *  @private
		 */
		public function set localeChain (value:Array) : void;

		/**
		 *  Gets the single instance of the ResourceManagerImpl class.
     *  This object manages all localized resources for a Flex application.
     *  
     *  @return An object implementing IResourceManager.
		 */
		public static function getInstance () : IResourceManager;

		/**
		 *  Constructor.
		 */
		public function ResourceManagerImpl ();

		/**
		 *  @private
     *  This method is called by the SystemManager class of an Application
     *  when the application starts.
     *  It is also called by the FlexModuleFactory class of a code module
     *  when that module gets loaded.
     *
     *  The MXML compiler autogenerated code which set the
     *  "compiledLocales" and "compiledResourceBundleNames" properties
     *  of the info() Object required by the IFlexModuleFactory
     *  interface that these classes implement.
     *  These two properties together indicate which resource bundle
     *  classes the MXML compiler autogenerated and linked into the
     *  application or module.
     *
     *  The "compiledLocales" property has been set to the locales
     *  which were specified at compile time using the -locale option.
     *  For example, if you compile with -locale=en_US,ja_JP
     *  then the "compiledLocales" property is the array [ "en_US", "ja_JP" ].
     *
     *  The "compiledResourceBundleNames" property has been set
     *  to the names of the resource bundles which are used by
     *  the application or module, as determined by the compiler
     *  from [ResourceBundle] metadata and ~~Resource() directives.
     *  For example, if the classes in the application or module
     *  declare that they use resource bundles named "core" and "MyApp",
     *  then the "compiledResourceBundleNames" property is the array
     *  [ "core", "MyApp" ].
     *
     *  The compiler autogenerated a ResourceBundle subclass for each
     *  (locale, bundle name) pair.
     *  For example, with the above locales and bundle names,
     *  there would be four classes:
     *    en_US$core_properties
     *    en_US$MyApp_properties
     *    ja_JP$core_properties
     *    ja_JP$MyApp_properties
     *
     *  This method creates one instance of each such class
     *  and installs it into the ResourceManager with addResourceBundle().
     *  If a bundle for a given locale and bundle name already exists
     *  in the ResourceManager already exists, it does not get replaced.
     *  This can happen when a code module gets loaded into an application.
		 */
		public function installCompiledResourceBundles (applicationDomain:ApplicationDomain, locales:Array, bundleNames:Array) : void;

		/**
		 *  @private
		 */
		function installCompiledResourceBundle (applicationDomain:ApplicationDomain, locale:String, bundleName:String) : void;

		/**
		 *  @copy mx.resources.IResourceManager#initializeLocaleChain()
		 */
		public function initializeLocaleChain (compiledLocales:Array) : void;

		/**
		 *  @copy mx.resources.IResourceManager#loadResourceModule()
		 */
		public function loadResourceModule (url:String, updateFlag:Boolean = true, applicationDomain:ApplicationDomain = null, securityDomain:SecurityDomain = null) : IEventDispatcher;

		/**
		 *  @copy mx.resources.IResourceManager#unloadResourceModule()
		 */
		public function unloadResourceModule (url:String, update:Boolean = true) : void;

		/**
		 *  @copy mx.resources.IResourceManager#addResourceBundle()
		 */
		public function addResourceBundle (resourceBundle:IResourceBundle) : void;

		/**
		 *  @copy mx.resources.IResourceManager#getResourceBundle()
		 */
		public function getResourceBundle (locale:String, bundleName:String) : IResourceBundle;

		/**
		 *  @copy mx.resources.IResourceManager#removeResourceBundle()
		 */
		public function removeResourceBundle (locale:String, bundleName:String) : void;

		/**
		 *  @copy mx.resources.IResourceManager#removeResourceBundlesForLocale()
		 */
		public function removeResourceBundlesForLocale (locale:String) : void;

		/**
		 *  @copy mx.resources.IResourceManager#update()
		 */
		public function update () : void;

		/**
		 *  @copy mx.resources.IResourceManager#getLocales()
		 */
		public function getLocales () : Array;

		/**
		 *  @copy mx.resources.IResourceManager#getPreferredLocaleChain()
		 */
		public function getPreferredLocaleChain () : Array;

		/**
		 *  @copy mx.resources.IResourceManager#getBundleNamesForLocale()
		 */
		public function getBundleNamesForLocale (locale:String) : Array;

		/**
		 *  @copy mx.resources.findResourceBundleWithResource
		 */
		public function findResourceBundleWithResource (bundleName:String, resourceName:String) : IResourceBundle;

		/**
		 *  @copy mx.resources.IResourceManager#getObject()
		 */
		public function getObject (bundleName:String, resourceName:String, locale:String = null) : *;

		/**
		 *  @copy mx.resources.IResourceManager#getString()
		 */
		public function getString (bundleName:String, resourceName:String, parameters:Array = null, locale:String = null) : String;

		/**
		 *  @copy mx.resources.IResourceManager#getStringArray()
		 */
		public function getStringArray (bundleName:String, resourceName:String, locale:String = null) : Array;

		/**
		 *  @copy mx.resources.IResourceManager#getNumber()
		 */
		public function getNumber (bundleName:String, resourceName:String, locale:String = null) : Number;

		/**
		 *  @copy mx.resources.IResourceManager#getInt()
		 */
		public function getInt (bundleName:String, resourceName:String, locale:String = null) : int;

		/**
		 *  @copy mx.resources.IResourceManager#getUint()
		 */
		public function getUint (bundleName:String, resourceName:String, locale:String = null) : uint;

		/**
		 *  @copy mx.resources.IResourceManager#getBoolean()
		 */
		public function getBoolean (bundleName:String, resourceName:String, locale:String = null) : Boolean;

		/**
		 *  @copy mx.resources.IResourceManager#getClass()
		 */
		public function getClass (bundleName:String, resourceName:String, locale:String = null) : Class;

		/**
		 *  @private.
		 */
		private function findBundle (bundleName:String, resourceName:String, locale:String) : IResourceBundle;

		/**
		 *  @private.
		 */
		private function supportNonFrameworkApps () : void;

		/**
		 *  @private
		 */
		private function getSystemPreferredLocales () : Array;

		/**
		 *  @private.
		 */
		private function dumpResourceModule (resourceModule:*) : void;
	}
	/**
	 *  @private
	 */
	private class ResourceModuleInfo
	{
		/**
		 *  @private
		 */
		public var errorHandler : Function;
		/**
		 *  @private
		 */
		public var moduleInfo : IModuleInfo;
		/**
		 *  @private
		 */
		public var readyHandler : Function;
		/**
		 *  @private
		 */
		public var resourceModule : IResourceModule;

		/**
		 *  Constructor.
		 */
		public function ResourceModuleInfo (moduleInfo:IModuleInfo, readyHandler:Function, errorHandler:Function);
	}
	/**
	 *  @private
	 */
	private class ResourceEventDispatcher extends EventDispatcher
	{
		/**
		 *  Constructor.
		 */
		public function ResourceEventDispatcher (moduleInfo:IModuleInfo);

		/**
		 *  @private
		 */
		private function moduleInfo_errorHandler (event:ModuleEvent) : void;

		/**
		 *  @private
		 */
		private function moduleInfo_progressHandler (event:ModuleEvent) : void;

		/**
		 *  @private
		 */
		private function moduleInfo_readyHandler (event:ModuleEvent) : void;
	}
}
