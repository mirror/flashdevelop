package mx.utils
{
	import flash.utils.ByteArray;
	import flash.utils.Dictionary;
	import mx.core.IPropertyChangeNotifier;
	import mx.core.IUIComponent;
	import mx.core.IUID;
	import mx.core.mx_internal;

	/**
	 *  The UIDUtil class is an all-static class *  with methods for working with UIDs (unique identifiers) within Flex. *  You do not create instances of UIDUtil; *  instead you simply call static methods such as the *  <code>UIDUtil.createUID()</code> method. *  *  <p><b>Note</b>: If you have a dynamic object that has no [Bindable] properties  *  (which force the object to implement the IUID interface), Flex  adds an  *  <code>mx_internal_uid</code> property that contains a UID to the object.  *  To avoid having this field  *  in your dynamic object, make it [Bindable], implement the IUID interface *  in the object class, or set a <coded>uid</coded> property with a value.</p>
	 */
	public class UIDUtil
	{
		/**
		 *  @private     *  Char codes for 0123456789ABCDEF
		 */
		private static const ALPHA_CHAR_CODES : Array = [];
		/**
		 *  This Dictionary records all generated uids for all existing items.
		 */
		private static var uidDictionary : Dictionary;

		/**
		 *  Generates a UID (unique identifier) based on ActionScript's     *  pseudo-random number generator and the current time.     *     *  <p>The UID has the form     *  <code>"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"</code>     *  where X is a hexadecimal digit (0-9, A-F).</p>     *     *  <p>This UID will not be truly globally unique; but it is the best     *  we can do without player support for UID generation.</p>     *     *  @return The newly-generated UID.
		 */
		public static function createUID () : String;
		/**
		 * Converts a 128-bit UID encoded as a ByteArray to a String representation.     * The format matches that generated by createUID. If a suitable ByteArray     * is not provided, null is returned.     *      * @param ba ByteArray 16 bytes in length representing a 128-bit UID.     *      * @return String representation of the UID, or null if an invalid     * ByteArray is provided.
		 */
		public static function fromByteArray (ba:ByteArray) : String;
		/**
		 * A utility method to check whether a String value represents a      * correctly formatted UID value. UID values are expected to be      * in the format generated by createUID(), implying that only     * capitalized A-F characters in addition to 0-9 digits are     * supported.     *      * @param uid The value to test whether it is formatted as a UID.     *      * @return Returns true if the value is formatted as a UID.
		 */
		public static function isUID (uid:String) : Boolean;
		/**
		 * Converts a UID formatted String to a ByteArray. The UID must be in the     * format generated by createUID, otherwise null is returned.     *      * @param String representing a 128-bit UID     *      * @return ByteArray 16 bytes in length representing the 128-bits of the     * UID or null if the uid could not be converted.
		 */
		public static function toByteArray (uid:String) : ByteArray;
		/**
		 *  Returns the UID (unique identifier) for the specified object.     *  If the specified object doesn't have an UID     *  then the method assigns one to it.     *  If a map is specified this method will use the map     *  to construct the UID.     *  As a special case, if the item passed in is null,     *  this method returns a null UID.     *       *  @param item Object that we need to find the UID for.     *     *  @return The UID that was either found or generated.
		 */
		public static function getUID (item:Object) : String;
		/**
		 * Returns the decimal representation of a hex digit.     * @private
		 */
		private static function getDigit (hex:String) : uint;
	}
}
