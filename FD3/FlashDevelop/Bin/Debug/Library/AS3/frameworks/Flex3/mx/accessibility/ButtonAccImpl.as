package mx.accessibility
{
	import flash.accessibility.Accessibility;
	import flash.events.Event;
	import flash.events.KeyboardEvent;
	import flash.ui.Keyboard;
	import mx.controls.Button;
	import mx.core.UIComponent;
	import mx.core.mx_internal;

include "../core/Version.as"
	/**
	 *  ButtonAccImpl is a subclass of AccessibilityImplementation
 *  which implements accessibility for the Button class.
	 */
	public class ButtonAccImpl extends AccImpl
	{
		/**
		 *  @private
		 */
		private static const STATE_SYSTEM_PRESSED : uint = 0x00000008;
		/**
		 *  @private
		 */
		private static const EVENT_OBJECT_NAMECHANGE : uint = 0x800C;
		/**
		 *  @private
		 */
		private static const EVENT_OBJECT_STATECHANGE : uint = 0x800A;

		/**
		 *  @private
	 *	Array of events that we should listen for from the master component.
		 */
		protected function get eventsToHandle () : Array;

		/**
		 *  Enables accessibility in the Button class.
	 * 
	 *  <p>This method is called by application startup code
	 *  that is autogenerated by the MXML compiler.
	 *  Afterwards, when instances of Button are initialized,
	 *  their <code>accessibilityImplementation</code> property
	 *  will be set to an instance of this class.</p>
		 */
		public static function enableAccessibility () : void;

		/**
		 *  @private
	 *  Creates a Button's AccessibilityImplementation object.
	 *  This method is called from UIComponent's
	 *  initializeAccessibility() method.
		 */
		static function createAccessibilityImplementation (component:UIComponent) : void;

		/**
		 *  Constructor.
	 *
	 *  @param master The UIComponent instance that this AccImpl instance
	 *  is making accessible.
		 */
		public function ButtonAccImpl (master:UIComponent);

		/**
		 *  @private
	 *  IAccessible method for returning the state of the Button.
	 *  States are predefined for all the components in MSAA.
	 *  Values are assigned to each state.
	 *  Depending upon the button being pressed or released,
	 *  a value is returned.
	 *
	 *  @param childID uint
	 *
	 *  @return State uint
		 */
		public function get_accState (childID:uint) : uint;

		/**
		 *  @private
	 *  IAccessible method for returning the default action
	 *  of the Button, which is Press.
	 *
	 *  @param childID uint
	 *
	 *  @return DefaultAction String
		 */
		public function get_accDefaultAction (childID:uint) : String;

		/**
		 *  @private
	 *  IAccessible method for performing the default action
	 *  associated with Button, which is Press.
	 *
	 *  @param childID uint
		 */
		public function accDoDefaultAction (childID:uint) : void;

		/**
		 *  @private
	 *  method for returning the name of the Button
	 *  which is spoken out by the screen reader
	 *  The Button should return the label inside as the name of the Button.
	 *  The name returned here would take precedence over the name
	 *  specified in the accessibility panel.
	 *
	 *  @param childID uint
	 *
	 *  @return Name String
		 */
		protected function getName (childID:uint) : String;

		/**
		 *  @private
	 *  Override the generic event handler.
	 *  All AccImpl must implement this
	 *  to listen for events from its master component.
		 */
		protected function eventHandler (event:Event) : void;
	}
}
