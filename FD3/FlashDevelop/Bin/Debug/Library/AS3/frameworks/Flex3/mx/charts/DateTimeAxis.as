/**********************************************************/
/*** Generated using Asapire [brainy 2008-Mar-07 11:06] ***/
/**********************************************************/
package mx.charts {
	import mx.charts.chartClasses.NumericAxis;
	public class DateTimeAxis extends NumericAxis {
		/**
		 * Determines the placement of labels along the axis.
		 */
		public function get alignLabelsToUnits():Boolean;
		public function set alignLabelsToUnits(value:Boolean):void;
		/**
		 * Specifies the interval between data in your chart,
		 *  specified in dataUnits.
		 */
		public function set dataInterval(value:Number):void;
		/**
		 * Specifies the units that you expect the data in your chart to represent.
		 *  The value can be one of the following:
		 *  milliseconds
		 *  seconds
		 *  minutes
		 *  hours
		 *  days
		 *  weeks
		 *  months
		 *  years
		 */
		public function get dataUnits():String;
		public function set dataUnits(value:String):void;
		/**
		 * The days to disable in a week.
		 *  All the dates in a month, for the specified day, are disabled.
		 *  The elements of this array can have values from 0 (Sunday) to
		 *  6 (Saturday).
		 *  For example, a value of [ 0, 6 ]
		 *  disables Sunday and Saturday.
		 */
		public function get disabledDays():Array;
		public function set disabledDays(value:Array):void;
		/**
		 * Disables single and multiple days.
		 */
		public function get disabledRanges():Array;
		public function set disabledRanges(value:Array):void;
		/**
		 * When set to true,
		 *  a DateTimeAxis considers all date values to be in the time zone
		 *  of the client machine running the application.
		 *  If false, all values are in Universal Time
		 *  (Greenwich Mean Time).
		 */
		public function get displayLocalTime():Boolean;
		public function set displayLocalTime(value:Boolean):void;
		/**
		 * Specifies the number of labelUnits
		 *  between label values along the axis.
		 *  Flex calculates the interval if this property is set to null.
		 */
		public function get interval():Number;
		public function set interval(value:Number):void;
		/**
		 * The units that the axis uses to generate labels.
		 *  By default, a DateTimeAxis considers all valid units
		 *  (milliseconds, seconds, minutes, hours, days,
		 *  weeks, months, or years).
		 */
		public function get labelUnits():String;
		public function set labelUnits(value:String):void;
		/**
		 * Specifies the maximum value for an axis label.
		 *  If null, Flex determines the minimum value
		 *  from the data in the chart.
		 */
		public function get maximum():Date;
		public function set maximum(value:Date):void;
		/**
		 * Specifies the minimum value for an axis label.
		 *  If null, Flex determines the minimum value
		 *  from the data in the chart.
		 */
		public function get minimum():Date;
		public function set minimum(value:Date):void;
		/**
		 * Specifies the number of minorTickUnits
		 *  between minor tick marks along the axis.
		 *  If this is set to NaN,
		 *  the DateTimeAxis calculates it automatically.
		 */
		public function get minorTickInterval():Number;
		public function set minorTickInterval(value:Number):void;
		/**
		 * The units that the Axis considers when generating minor tick marks.
		 *  By default, a DateTimeAxis considers all valid units
		 *  (milliseconds, seconds, minutes, hours, days,
		 *  weeks, months, or years).
		 */
		public function get minorTickUnits():String;
		public function set minorTickUnits(value:String):void;
		/**
		 * Specifies a method that customizes the value of the data points.
		 *  With this property, you specify a method that accepts a value and
		 *  returns a Date object. The Date object is then used in the DateTimeAxis
		 *  object of the chart. This lets you provide customizable date input strings
		 *  and convert them to Date objects, which Flex can then interpret for use in the DateTimeAxis.
		 */
		public function set parseFunction(value:Function):void;
		/**
		 * The fields of the DescribeData structure that this axis is interested in.
		 */
		protected function get requiredDescribedFields():uint;
		/**
		 * The width, in pixels, of a single data unit.
		 *  The type of a data unit is determined
		 *  by the value of the dataUnits property.
		 */
		public function get unitSize():Number;
		/**
		 * Constructor.
		 */
		public function DateTimeAxis();
		/**
		 * Builds an Array of positions for the minor tick marks Array that is generated by this axis.
		 *  Subclasses must implement this function. This function is  called automatically
		 *  by the NumericAxis. You should access the minorTicks property
		 *  instead of calling this function directly.
		 *
		 * @return                  <Array> An Array of positions from 0 to 1 that represent points between the axis
		 *                            minimum and maximum values where minor tick marks are rendered.
		 */
		protected override function buildMinorTickCache():Array;
		/**
		 * Filters a set of values of arbitrary type
		 *  to a set of numbers that can be mapped.
		 *
		 * @param cache             <Array> An Array of objects where converted values
		 *                            are read from and stored.
		 * @param field             <String> The field of the objects in the cache Array
		 *                            containing the pre-filtered values.
		 * @param filteredString    <String> The field of the objects in the cache Array
		 *                            where filtered values should be stored.
		 */
		public override function filterCache(cache:Array, field:String, filteredString:String):void;
		/**
		 * The default formatting function used
		 *  when the axis renders with day-based labelUnits.
		 *  If you write a custom DateTimeAxis class, you can override this method to provide
		 *  alternate default formatting.
		 *
		 * @param d                 <Date> The Date object that contains the unit to format.
		 * @param previousValue     <Date> The Date object that contains the data point that occurs
		 *                            prior to the current data point.
		 * @param axis              <DateTimeAxis> The DateTimeAxis on which the label is rendered.
		 * @return                  <String> The formatted label.
		 */
		protected function formatDays(d:Date, previousValue:Date, axis:DateTimeAxis):String;
		/**
		 * The default formatting function used
		 *  when the axis renders with millisecond-based labelUnits.
		 *  If you write a custom DateTimeAxis class, you can override this method
		 *  to provide alternate default formatting.
		 *
		 * @param d                 <Date> The Date object that contains the unit to format.
		 * @param previousValue     <Date> The Date object that contains the data point that occurs
		 *                            prior to the current data point.
		 * @param axis              <DateTimeAxis> The DateTimeAxis on which the label is rendered.
		 * @return                  <String> The formatted label.
		 */
		protected function formatMilliseconds(d:Date, previousValue:Date, axis:DateTimeAxis):String;
		/**
		 * The default formatting function used
		 *  when the axis renders with minute-based labelUnits.
		 *  If you write a custom DateTimeAxis class, you can override this method
		 *  to provide alternate default formatting.
		 *
		 * @param d                 <Date> The Date object that contains the unit to format.
		 * @param previousValue     <Date> The Date object that contains the data point that occurs
		 *                            prior to the current data point.
		 * @param axis              <DateTimeAxis> The DateTimeAxis on which the label is rendered.
		 * @return                  <String> The formatted label.
		 */
		protected function formatMinutes(d:Date, previousValue:Date, axis:DateTimeAxis):String;
		/**
		 * The default formatting function used
		 *  when the axis renders with month-based labelUnits.
		 *  If you write a custom DateTimeAxis class, you can override this method to
		 *  provide alternate default formatting.
		 *
		 * @param d                 <Date> The Date object that contains the unit to format.
		 * @param previousValue     <Date> The Date object that contains the data point that occurs
		 *                            prior to the current data point.
		 * @param axis              <DateTimeAxis> The DateTimeAxis on which the label is rendered.
		 * @return                  <String> The formatted label.
		 */
		protected function formatMonths(d:Date, previousValue:Date, axis:DateTimeAxis):String;
		/**
		 * The default formatting function used
		 *  when the axis renders with second-based labelUnits.
		 *  If you write a custom DateTimeAxis class, you can override this method to
		 *  provide alternate default formatting.
		 *
		 * @param d                 <Date> The Date object that contains the unit to format.
		 * @param previousValue     <Date> The Date object that contains the data point that occurs
		 *                            prior to the current data point.
		 * @param axis              <DateTimeAxis> The DateTimeAxis on which the label is rendered.
		 * @return                  <String> The formatted label.
		 */
		protected function formatSeconds(d:Date, previousValue:Date, axis:DateTimeAxis):String;
		/**
		 * The default formatting function used
		 *  when the axis renders with year-based labelUnits.
		 *  If you write a custom DateTimeAxis class, you can override this method
		 *  to provide alternate default formatting.
		 *
		 * @param d                 <Date> The Date object that contains the unit to format.
		 * @param previousValue     <Date> The Date object that contains the data point that occurs
		 *                            prior to the current data point.
		 * @param axis              <DateTimeAxis> The DateTimeAxis on which the label is rendered.
		 * @return                  <String> The formatted label.
		 */
		protected function formatYears(d:Date, previousValue:Date, axis:DateTimeAxis):String;
		/**
		 * Invoked when an AxisRenderer is unable to cleanly render
		 *  the labels without overlap, and would like the Axis object
		 *  to reduce the set of labels.
		 *  The method is passed the two labels that are overlapping.
		 *
		 * @param intervalStart     <AxisLabel> The start of the interval where labels overlap.
		 * @param intervalEnd       <AxisLabel> The end of the interval where labels overlap.
		 * @return                  <AxisLabelSet> A new label set that resolves the overlap by reducing
		 *                            the number of labels.
		 */
		public override function reduceLabels(intervalStart:AxisLabel, intervalEnd:AxisLabel):AxisLabelSet;
		/**
		 * Maps a set of values from data space to screen space.
		 *
		 * @param cache             <Array> An Array of objects where mapped values
		 *                            are read from and stored.
		 * @param field             <String> The field of the objects in the cache Array
		 *                            containing the pre-mapped values.
		 * @param convertedField    <String> The field of the objects in the cache Array
		 *                            where mapped values should be stored.
		 */
		public override function transformCache(cache:Array, field:String, convertedField:String):void;
	}
}
