/**********************************************************/
/*** Generated using Asapire [brainy 2008-Mar-07 11:06] ***/
/**********************************************************/
package mx.styles {
	import flash.events.EventDispatcher;
	public class CSSStyleDeclaration extends EventDispatcher {
		/**
		 * This function, if it isn't null,
		 *  is usually autogenerated by the MXML compiler.
		 *  It produce copies of a plain Object, such as
		 *  { leftMargin: 10, rightMargin: 10 },
		 *  containing name/value pairs for style properties; the object is used
		 *  to build a node of the prototype chain for looking up style properties.
		 */
		public var defaultFactory:Function;
		/**
		 * This function, if it isn't null,
		 *  is usually autogenerated by the MXML compiler.
		 *  It produce copies of a plain Object, such as
		 *  { leftMargin: 10, rightMargin: 10 },
		 *  containing name/value pairs for style properties; the object is used
		 *  to build a node of the prototype chain for looking up style properties.
		 */
		public var factory:Function;
		/**
		 * If the setStyle() method is called on a UIComponent or CSSStyleDeclaration
		 *  at run time, this object stores the name/value pairs that were set;
		 *  they override the name/value pairs in the objects produced by
		 *  the  methods specified by the defaultFactory and
		 *  factory properties.
		 */
		protected var overrides:Object;
		/**
		 * Constructor.
		 *
		 * @param selector          <String (default = null)> If not null, this CSSStyleDeclaration will be
		 *                            registered with the StyleManager using the selector value.
		 */
		public function CSSStyleDeclaration(selector:String = null);
		/**
		 * Clears a style property on this CSSStyleDeclaration.
		 *  This is the same as setting the style value to undefined.
		 *
		 * @param styleProp         <String> The name of the style property.
		 */
		public function clearStyle(styleProp:String):void;
		/**
		 * Gets the value for a specified style property,
		 *  as determined solely by this CSSStyleDeclaration.
		 *
		 * @param styleProp         <String> The name of the style property.
		 * @return                  <*> The value of the specified style property if set,
		 *                            or undefined if not.
		 */
		public function getStyle(styleProp:String):*;
		/**
		 * Sets a style property on this CSSStyleDeclaration.
		 *
		 * @param styleProp         <String> The name of the style property.
		 * @param newValue          <*> The value of the style property.
		 *                            The value may be of any type.
		 *                            The values null, "", false,
		 *                            NaN, and 0 are all valid style values,
		 *                            but the value undefined is not.
		 *                            Setting a style property to the value undefined
		 *                            is the same as calling the clearStyle() method.
		 */
		public function setStyle(styleProp:String, newValue:*):void;
	}
}
