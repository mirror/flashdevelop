using System;
using System.Collections.Generic;
using System.Text;
using System.Xml;
using ProjectManager.Projects.AS3;
using System.IO;
using System.Collections;

namespace FDBuild.Building.AS3
{
    class FlexConfigWriter : XmlTextWriter
    {
        AS3Project project;

        public FlexConfigWriter(string libraryPath): base(libraryPath, new UTF8Encoding(false))
        {
            base.Formatting = Formatting.Indented;
        }

        public void WriteConfig(AS3Project project, string[] extraClasspaths)
        {
            this.project = project;

            try { InternalWriteConfig(extraClasspaths); }
            finally { Close(); }
        }

        private void InternalWriteConfig(string[] extraClasspaths)
        {
            WriteStartDocument();
            WriteComment("This file was generated by a FDBuild.");
            WriteComment("Any modifications you make may be lost.");
            WriteStartElement("flex-config");
                AddTargetPlayer();
                WriteStartElement("compiler");
                    AddClassPaths(extraClasspaths);
                    AddLibraries();
                WriteEndElement();
                AddRSLs();
                AddCompileTargets();
                AddMovieOptions();
            WriteEndElement();
        }

        private void AddTargetPlayer()
        {
            if (project.CompilerOptions.MinorVersion.Length > 0)
            {
                WriteElementString("target-player", project.MovieOptions.Version + "." + project.CompilerOptions.MinorVersion);
            }
            else if (project.MovieOptions.Version > 9)
            {
                WriteElementString("target-player", project.MovieOptions.Version + ".0.0");
            }
        }

        private void AddLibraries()
        {
            MxmlcOptions options = project.CompilerOptions;
            string absPath;
            if (options.IncludeLibraries.Length > 0)
            {
                WriteStartElement("include-libraries");
                foreach (string path in options.IncludeLibraries)
                {
                    absPath = project.GetAbsolutePath(path);
                    if (File.Exists(absPath))
                        WriteElementPathString("library", absPath);
                    else if (Directory.Exists(absPath))
                    {
                        string[] libs = Directory.GetFiles(absPath, "*.swc");
                        foreach(string lib in libs)
                            WriteElementPathString("library", lib);
                    }
                }
                WriteEndElement();
            }
            if (options.ExternalLibraryPaths.Length > 0)
            {
                WriteStartElement("external-library-path");
                WriteAttributeString("append", "true");
                foreach (string path in options.ExternalLibraryPaths)
                {
                    absPath = project.GetAbsolutePath(path);
                    if (File.Exists(absPath) || Directory.Exists(absPath))
                        WriteElementPathString("path-element", absPath);
                }
                WriteEndElement();
            }
            if (options.LibraryPaths.Length > 0)
            {
                WriteStartElement("library-path");
                WriteAttributeString("append", "true");
                foreach (string path in options.LibraryPaths)
                {
                    absPath = project.GetAbsolutePath(path);
                    if (File.Exists(absPath) || Directory.Exists(absPath))
                        WriteElementPathString("path-element", absPath);
                }
                WriteEndElement();
            }
        }

        private void AddRSLs()
        {
            MxmlcOptions options = project.CompilerOptions;
            if (options.RSLPaths.Length > 0)
            {
                foreach (string path in options.RSLPaths)
                {
                    string[] parts = path.Split(',');
                    if (parts.Length < 2) continue;
                    string absPath = project.GetAbsolutePath(parts[0]);
                    if (File.Exists(absPath))
                    {
                        WriteStartElement("runtime-shared-library-path");
                            WriteElementString("path-element", absPath);
                            WriteElementString("rsl-url", parts[1]);
                            if (parts.Length > 2)
                                WriteElementString("policy-file-url", parts[2]);
                            if (parts.Length > 3)
                                WriteElementString("rsl-url", parts[3]);
                            if (parts.Length > 4)
                                WriteElementString("policy-file-url", parts[4]);
                        WriteEndElement();
                    }
                }
            }
        }

        private void AddMovieOptions()
        {
            WriteElementString("default-background-color", project.MovieOptions.Background);
            WriteElementString("default-frame-rate", project.MovieOptions.Fps.ToString());
            WriteStartElement("default-size");
                WriteElementString("width", project.MovieOptions.Width.ToString());
                WriteElementString("height", project.MovieOptions.Height.ToString());
            WriteEndElement();

            /*MxmlcOptions options = project.CompilerOptions;

            WriteStartElement("metadata");
                WriteElementString("title", options.MetaTitle);
                WriteElementString("description", options.MetaDescription);
                WriteElementString("publisher", options.MetaPublisher);
                WriteElementString("creator", options.MetaCreator);
                WriteElementString("language", options.MetaLanguage);
            WriteEndElement();*/
        }

        public void AddClassPaths(string[] extraClasspaths)
        {
            WriteStartElement("source-path");
            WriteAttributeString("append", "true");

            // build classpaths
            ArrayList classPaths = new ArrayList(project.AbsoluteClasspaths);

            foreach (string extraClassPath in extraClasspaths)
                classPaths.Add(extraClassPath);

            foreach (string classPath in classPaths)
                WriteElementPathString("path-element", classPath);

            WriteEndElement();
        }

        private void WriteElementPathString(string name, string path)
        {
            if (Directory.Exists(path) || File.Exists(path))
                WriteElementString(name, path);
        }

        public void AddCompileTargets()
        {
            if (project.CompileTargets.Count == 0) return;
            WriteStartElement("file-specs");
            foreach (string relTarget in project.CompileTargets)
            {
                string target = project.GetAbsolutePath(relTarget);
                if (File.Exists(target))
                {
                    WriteElementString("path-element", target);
                    break;
                }
            }
            WriteEndElement();
        }
    }
}
